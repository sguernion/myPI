commandArray = {}package.path = package.path..";/home/pi/domoticz/scripts/lua/modules/?.lua"require 'functions_utils'require 'functions_custom'require 'Properties_class'--[[MQTT demo device script devicechanges are pushed to localhost port 5001 if there's any value to publisha node.js script like this is waiting and publishes using mqtt var url = require("url");var http = require('http');var pubclient = new mqtt.MQTTClient(1883, '127.0.0.1', 'domoticz'); http.createServer(function (req, res) {	res.writeHead(200, {'Content-Type': 'text/plain'});	res.end('Response from Node.js \n');	pubclient.publish('/events/domoticz'+url.parse(req.url).pathname, url.parse(req.url).query);	}).listen(5001, '127.0.0.1'); NB. Domoticz will add _ and property to the name of certain sensors (e.g. _temperature, _humidity). This is passed as lowest level of message in mqtt--]]local properties = Properties.create(uservariables["config_file"])local mqtt_host = properties:get('mqtt.host')local mqtt_port = properties:get('mqtt.port')d = otherdevicesdevice = ""for i, v in pairs(devicechanged) do  if (#device == 0 or #i < #device) then device = i end  text = v..''  if #text > 0 then  	device = string.gsub(string.gsub(string.gsub(string.gsub(device, '_Utility', ''), '_Temperature', ''), '_Humidity', ''), '_Dewpoint', '')  	typed =string.gsub(string.gsub(i, device, ''), '_', '/')  	--print(typed)	text = device ..  typed	text = mqtt_host..':'.. mqtt_port .. '/'..text..'?'..v	text = string.gsub(text, "%s+", '%%20')	if(mqtt_enable()) then commandArray['OpenURL']=text end	if (isDebug()) then print(text) end  endend if (isDebug()) then print('--- LUA Device script MQTT --- Triggered by ' .. device .. ' now ' .. d[device]) end return commandArray